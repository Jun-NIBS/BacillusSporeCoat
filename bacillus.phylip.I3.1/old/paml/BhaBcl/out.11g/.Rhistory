rm(list=ls());
 debug = 1;
 pickSig = 'NO'; qcutoff=0.05; #'YES' will use qcutoff 
 my.model = 'H1bwe';    my.df = 1;  #for H0-H2 pchisq test
 library(qvalue)
#### first, do lnL 
 tblnL = read.table( "out.coat.11glnL.csv", header=F );
 tblnL[,1] = as.character( tblnL[,1] );
 names(tblnL) = c("bg","model",NA,NA,NA,"lnL",NA);
 # parse the lnL results
 tbH0     = tblnL[grep("H0",     tblnL[,2]), ]
 # tbHprime = tblnL[grep(my.model, tblnL[,2]), ] 
 
myLRT = function( my.df, qcutoff, tag ) {
 # LRT using 2 *(loglikelihood1 - loglikelihood2)
 for( j in 1:length(tbHprime[,1]) ) {
  my.bg = tbHprime[j,1];
  lnLHA     = tbHA$lnL[tbHA$bg==my.bg];
  lnLHprime = tbHprime$lnL[tbHprime$bg==my.bg]; 
  deltalnL  = - lnLHA  + lnLHprime 
  tbHprime$deltalnL[j] = deltalnL ;
  tbHprime$p[j] = round( pchisq( 2* deltalnL, df=my.df,low=F), 4);
 }
 qobj = qvalue( tbHprime$p);
 tbHprime$q = qobj$qvalues; 
 tbHprime$sig = ifelse( tbHprime$q < qcutoff, tag, '' );
 tbHprime;
}
tbH0
head(tblnL)
#### first, do lnL 
 tblnL = read.table( "out.coat.11glnL.csv", header=F );
 tblnL[,1] = as.character( tblnL[,1] );
 names(tblnL) = c("bg","model",NA,NA,NA,NA,"lnL",NA);
 # parse the lnL results
 tbH0     = tblnL[grep("H0",     tblnL[,2]), ]
 # tbHprime = tblnL[grep(my.model, tblnL[,2]), ] 
tbH0
myLRT = function( my.df, qcutoff, tag ) {
 # LRT using 2 *(loglikelihood1 - loglikelihood2)
 for( j in 1:length(tbHprime[,1]) ) {
  my.bg = tbHprime[j,1];
  lnLHA     = tbHA$lnL[tbHA$bg==my.bg];
  lnLHprime = tbHprime$lnL[tbHprime$bg==my.bg]; 
  deltalnL  = - lnLHA  + lnLHprime 
  tbHprime$deltalnL[j] = deltalnL ;
  tbHprime$p[j] = round( pchisq( 2* deltalnL, df=my.df,low=F), 4);
 }
 qobj = qvalue( tbHprime$p);
 tbHprime$q = qobj$qvalues; 
 tbHprime$sig = ifelse( tbHprime$q < qcutoff, tag, '' );
 tbHprime;
}
 tbH1bwe      = tblnL[grep('H1w',   tblnL[,2]), ] 
 tbH2C2bwe   = tblnL[grep('H2C2w',   tblnL[,2]), ] 
 # tbH3C2bweS1 = tblnL[grep('H3C2bweS1', tblnL[,2]), ] 
tbH1bwe
 tbH1w     = tblnL[grep('H1w',   tblnL[,2]), ] 
 tbH2C2w   = tblnL[grep('H2C2w',   tblnL[,2]), ] 
tbH1w
tbH2C2w
 tbHprime = tbH1w;
 tbHA = tbH0;
 tbH1w = myLRT( 1, 0.05, '1b' );
 tbHprime = tbH2C2w;
 tbHA = tbH1w;
 tbH2C2w = myLRT( 1, 0.05, '2b');
 table( tbH1w$sig );
 table( tbH2C2w$sig );
tbH1w
tbH2Cw
tbH2C2w
 tbHprime = tbH2C2w;
 tbHA = tbH0;
 tbH2C2w = myLRT( 2, 0.05, '2b');
tbH2C2w
 tbHprime = tbH2C2w;
 tbHA = tbH0;
 tbH2C2w = myLRT( 2, 0.05, '2b');
 tbHprime = tbH2C2w;
 tbHA = tbH0;
 tbH2C2w = myLRT( 2, 0.05, '2b');
 
myLRT = function( my.df, qcutoff, tag ) {
 # LRT using 2 *(loglikelihood1 - loglikelihood2)
 for( j in 1:length(tbHprime[,1]) ) {
  my.bg = tbHprime[j,1];
  lnLHA     = tbHA$lnL[tbHA$bg==my.bg];
  lnLHprime = tbHprime$lnL[tbHprime$bg==my.bg]; 
  deltalnL  = - lnLHA  + lnLHprime 
  tbHprime$deltalnL[j] = deltalnL ;
  tbHprime$p[j] = round( pchisq( 2* deltalnL, df=my.df,low=F), 4);
 }
 #qobj = qvalue( tbHprime$p);
 #tbHprime$q = qobj$qvalues; 
 #tbHprime$sig = ifelse( tbHprime$q < qcutoff, tag, '' );
 #tbHprime;
}
 tbHprime = tbH2C2w;
 tbHA = tbH0;
 tbH2C2w = myLRT( 2, 0.05, '2b');
tbH2C2w
 tbH2C2w   = tblnL[grep('H2C2w',   tblnL[,2]), ] 
tbH2C2w
 tbHprime = tbH2C2w;
 tbHA = tbH0;
 tbH2C2w = myLRT( 2, 0.05, '2b');
tbH2C2w
tbH0
 for( j in 1:length(tbHprime[,1]) ) {
  my.bg = tbHprime[j,1];
  lnLHA     = tbHA$lnL[tbHA$bg==my.bg];
  lnLHprime = tbHprime$lnL[tbHprime$bg==my.bg]; 
  deltalnL  = - lnLHA  + lnLHprime 
  tbHprime$deltalnL[j] = deltalnL ;
  tbHprime$p[j] = round( pchisq( 2* deltalnL, df=my.df,low=F), 4);
 }
tbHprime
 
myLRT = function( my.df, qcutoff, tag ) {
 # LRT using 2 *(loglikelihood1 - loglikelihood2)
 for( j in 1:length(tbHprime[,1]) ) {
  my.bg = tbHprime[j,1];
  lnLHA     = tbHA$lnL[tbHA$bg==my.bg];
  lnLHprime = tbHprime$lnL[tbHprime$bg==my.bg]; 
  deltalnL  = - lnLHA  + lnLHprime 
  tbHprime$deltalnL[j] = deltalnL ;
  tbHprime$p[j] = round( pchisq( 2* deltalnL, df=my.df,low=F), 4);
 }
 #qobj = qvalue( tbHprime$p);
 #tbHprime$q = qobj$qvalues; 
 #tbHprime$sig = ifelse( tbHprime$q < qcutoff, tag, '' );
 tbHprime;
}
 tbHprime = tbH2C2w;
 tbHA = tbH0;
 tbH2C2w = myLRT( 2, 0.05, '2b');
tbHprime
tbH1w     = tblnL[grep('H1w',   tblnL[,2]), ] 
 tbH2C2w   = tblnL[grep('H2C2w',   tblnL[,2]), ] 
 tbHprime = tbH1w;
 tbHA = tbH0;
 tbH1w = myLRT( 1, 0.05, '1b' );
 tbHprime = tbH2C2w;
 tbHA = tbH0;
 tbH2C2w = myLRT( 2, 0.05, '2b');
tbH2Cw2
tbH2C2w
 
myLRT = function( my.df, cutoff, tag ) {
 # LRT using 2 *(loglikelihood1 - loglikelihood2)
 for( j in 1:length(tbHprime[,1]) ) {
  my.bg = tbHprime[j,1];
  lnLHA     = tbHA$lnL[tbHA$bg==my.bg];
  lnLHprime = tbHprime$lnL[tbHprime$bg==my.bg]; 
  deltalnL  = - lnLHA  + lnLHprime 
  tbHprime$deltalnL[j] = deltalnL ;
  tbHprime$p[j] = round( pchisq( 2* deltalnL, df=my.df,low=F), 4);
 }
 #qobj = qvalue( tbHprime$p);
 #tbHprime$q = qobj$qvalues; 
 #tbHprime$sig = ifelse( tbHprime$q < qcutoff, tag, '' );
 tbHprime$sig = ifelse( tbHprime$p < cutoff, tag, '' );
 tbHprime;
}
 tbH1w     = tblnL[grep('H1w',   tblnL[,2]), ] 
 tbH2C2w   = tblnL[grep('H2C2w',   tblnL[,2]), ] 
 tbHprime = tbH1w;
 tbHA = tbH0;
 tbH1w = myLRT( 1, 0.05, '1b' );
 tbHprime = tbH2C2w;
 tbHA = tbH0;
 tbH2C2w = myLRT( 2, 0.05, '2b');
tbH2C2w
 table( tbH1w$sig );
 table( tbH2C2w$sig );
 ## how many are shared significant pairs?
 tbH1w$sig2  = tbH2C2w$sig[match(tbH1w$bg, tbH2C2w$bg)] 
tbH1w
names(tbH1w)
  out = tbH1w[-c(3:8)]
 out
 
###second merge with omega
 tbomega = read.table("__omega.coat.11g.011009.csv",header=F,fill=T,sep="\t");
 for( i in c(1:3,5,7) ) {
  tbomega[,i] = as.character(tbomega[,i])
 }
 str(tbomega)
###second merge with omega
 tbomega = read.table("__omega.coat.11g.011009.csv",header=F,fill=T,sep="\t");
 for( i in c(1:3,5,7,9,11) ) {
  tbomega[,i] = as.character(tbomega[,i])
 }
head(tbomega)
 my.model ='H1w';
 my.model ='H1w';
 omega = tbomega[grep(my.model, tbomega$V2), ]
omega
 
 my.model ='H1w';
 omega = tbomega[grep(my.model, tbomega$V2), ]
 labels= c("bg","model",NA,"wbsu",NA,"wbwe",NA,"wbce",NA,"wbth","wban");
 names(omega) = labels;
omega
 omega$sig    = out$sig[match(omega$bg, out$bg)]
 omega$sig2   = out$sig2[match(omega$bg, out$bg)]
omega
 out = tbH1w[-c(2:8)]
 
###second merge with omega
 tbomega = read.table("__omega.coat.11g.011009.csv",header=F,fill=T,sep="\t");
 for( i in c(1:3,5,7,9,11) ) {
  tbomega[,i] = as.character(tbomega[,i])
 }
 
 my.model ='H1w';
 omega = tbomega[grep(my.model, tbomega$V2), ]
 labels= c("bg","model",NA,"wbsu",NA,"wbwe",NA,"wbce",NA,"wbth","wban");
 names(omega) = labels;
 omega$sig    = out$sig[match(omega$bg, out$bg)]
 omega$sig2   = out$sig2[match(omega$bg, out$bg)]
omega
out
omega
 
 #my.model ='H1w';
 my.model ='H2C2w';
 omega = tbomega[grep(my.model, tbomega$V2), ]
 labels= c("bg","model",NA,"wbsu",NA,"wbwe",NA,"wbce",NA,"wbth","wban");
 names(omega) = labels;
 omega$sig    = out$sig[match(omega$bg, out$bg)]
 omega$sig2   = out$sig2[match(omega$bg, out$bg)]
omega
 #my.model ='H1w';
 my.model ='H2C2w';
 omega = tbomega[grep(my.model, tbomega$V2), ]
 labels= c("bg","model",NA,"wbsu",NA,"wbwe",NA,"wbce",NA,"wbth","wban");
 names(omega) = labels;
 #omega$sig    = out$sig[match(omega$bg, out$bg)]
 omega$sig2   = out$sig2[match(omega$bg, out$bg)]
omega
 #my.model ='H1w';
 my.model ='H2C2w';
 omega = tbomega[grep(my.model, tbomega$V2), ]
 labels= c("bg","model",NA,"wbsu",NA,"wbwe",NA,"wbce",NA,"wbth","wban");
 names(omega) = labels;
 omega$sig    = out$sig[match(omega$bg, out$bg)]
 omega$sig2   = out$sig2[match(omega$bg, out$bg)]
omega
